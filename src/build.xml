<?xml version="1.0"?>

<project name="biogears" default="all" basedir="./" xmlns:if="ant:if" xmlns:unless="ant:unless">

	<property environment="env"/>
    <condition property="env" value="MSVC">
       <not>  
          <isset property="env"/>
       </not>
    </condition>
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/build.properties.${env}"/>

    <!-- Environment variables -->
    <condition property="env" value="MSVC">
       <not>  
          <isset property="env"/>
       </not>
    </condition>
    
    <condition property="MSVC">
        <equals arg1="${env}" arg2="MSVC"/>
    </condition>
    
    <condition property="mingw">
        <equals arg1="${env}" arg2="mingw"/>
    </condition>
    
    <condition property="eclipsemingw">
        <equals arg1="${env}" arg2="eclipsemingw"/>
    </condition>
    
    <condition property="xcode">
        <equals arg1="${env}" arg2="xcode"/>
    </condition>

    <condition property="unixMake">
        <equals arg1="${env}" arg2="unixMake"/>
    </condition>

    <condition property="raspberryPi">
        <equals arg1="${env}" arg2="raspberryPi"/>
    </condition>

    <!-- Architecture variables -->
    <property environment="architecture"/>
    <condition property="architecture" value="x86">
       <not>  
          <isset property="architecture"/>
       </not>
    </condition>
    
    <condition property="x86">
        <equals arg1="${architecture}" arg2="x86"/>
    </condition>
    
    <condition property="x64">
        <equals arg1="${architecture}" arg2="x64"/>
    </condition>
    
    <condition property="architectureAppend" value="">
        <isset property="x86"/>
    </condition>
    
    <condition property="architectureAppend" value="64">
        <isset property="x64"/>
    </condition>
    
    <condition property="configuration" value="${biogears.config}">
        <isset property="x86"/>
    </condition>
    
    <condition property="configuration" value="${biogears.config}64">
        <isset property="x64"/>
    </condition>

    <condition property="commitHash" value="00000000">
       <not>  
          <isset property="commitHash"/>
       </not>
    </condition>

    
	
	<property name="scenariosFolder" value="Scenarios"/>
    <target name="copyBinGit">
        <copy todir="D:/JenkinsBuild/History/${env}-${architecture}/${jenkinsTimestamp} - ${commitHash}">
            <fileset dir="${biogears.bin}">
                <exclude name="Scenarios/**"/>
            </fileset>
        </copy>
        <copy todir="D:/JenkinsBuild/History/${env}-${architecture}/${jenkinsTimestamp} - ${commitHash}/${scenariosFolder}">
            <fileset dir="${biogears.bin}/Scenarios"/>
        </copy>
    </target>        
	
	<target name="info" description="shows all usable commands">
		<exec executable="cmd">
			<arg value="/c"/>
			<arg value="ant"/>
			<arg value="-p"/>
		</exec>
	</target>
	
	<target name="all" depends="cmake, clean, compile, genData, genStates, runVandV, runUnitTests, deploy" description="Cleans, compiles, executes tests, and builds all deploy packages"/>
	
	<target name="runAll" depends="runVandV, runUnitTests" description="Executes all scenarios and unit test, and does comparison"/>
	
	<target name="setup" depends="cmake, compileJava, refreshBin" description="Setup everything fresh, but don't compile"/>
	
	<!-- 
	************* 
	CMake Targets
	************* 
	-->
    
    <target name="cmake" depends="cmake-msvc,cmake-mingw,cmake-eclipsemingw,cmake-xcode,cmake-unixMake,cmake-raspberryPi"/>
    <target name="cmake-msvc" description="Generates Win32 projects" if="MSVC">
        <antcall target="cmake-msvc-x86"/>
        <antcall target="cmake-msvc-x64"/>
    </target>
    <target name="cmake-msvc-x86"  description="Generates Win32 projects">
        <exec executable="cmd.exe" dir="${biogears.src}/schema" failonerror="true">
            <arg line="/c buildXSD.bat"/>
        </exec>
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true">
            <arg line="/c GenMSVS14x32.bat"/>
        </exec>
    </target>
    <target name="cmake-msvc-x64"  description="Generates x64 projects">
        <exec executable="cmd.exe" dir="${biogears.src}/schema" failonerror="true">
            <arg line="/c buildXSD.bat"/>
        </exec>
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true">
            <arg line="/c GenMSVS14x64.bat"/>
        </exec>
    </target>
    <target name="cmake-mingw"  description="Generates MinGW Windows make files" if="mingw">
        <exec executable="cmd.exe" dir="${biogears.src}/schema" failonerror="true">
            <arg line="/c buildXSD.bat"/>
        </exec>
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true">
            <arg line="/c GenMinGW.bat"/>
        </exec>
    </target>
    <target name="cmake-eclipsemingw"  description="Generates Eclipse MinGW Windows make files" if="eclipsemingw">        
        <exec executable="cmd.exe" dir="${biogears.src}/schema" failonerror="true">
            <arg line="/c buildXSD.bat"/>
        </exec>
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true">
            <arg line="/c GenEclipseMinGW.bat"/>
        </exec>
    </target>
    <target name="cmake-xcode" description="Generates Xcode project files" if="xcode">
        <exec executable="/bin/bash" dir="${biogears.src}/schema" failonerror="true">
            <arg value="buildXSD.sh"/>
            <arg value="osx"/>
        </exec>
        <exec executable="/bin/bash" dir="${biogears.src}/cmake" failonerror="true">
            <arg value="GenXcode.sh"/>
        </exec>
    </target>
    <target name="cmake-unixMake" description="Generates Unix make files" if="unixMake">
        <exec executable="/bin/bash" dir="${biogears.src}/schema" failonerror="true">
            <arg value="buildXSD.sh"/>
            <arg value="linux"/>
        </exec>
        <exec executable="/bin/bash" dir="${biogears.src}/cmake" failonerror="true">
            <arg value="GenUnixMake.sh"/>
        </exec>
    </target>
    <target name="cmake-raspberryPi" description="Generates Raspberry Pi  make files" if="raspberryPi">
        <exec executable="/bin/bash" dir="${biogears.src}/schema" failonerror="true">
            <arg value="buildXSD.sh"/>
            <arg value="linux"/>
        </exec>
        <exec executable="/bin/bash" dir="${biogears.src}/cmake" failonerror="true">
            <arg value="GenRaspberryPi.sh"/>
        </exec>
    </target>
    
    <target name="cmakeRefresh" depends="cmakeRefresh-msvc,cmakeRefresh-mingw,cmakeRefresh-eclipsemingw,cmakeRefresh-xcode,cmakeRefresh-unixMake"/>
    <target name="cmakeRefresh-msvc"  description="Regenerates Win32 projects" if="MSVC">
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true" if="x86">
            <arg line="/c GenMSVS14x32.bat"/>
        </exec>
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true" if="x64">
            <arg line="/c GenMSVS14x64.bat"/>
        </exec>
    </target>
    <target name="cmakeRefresh-mingw"  description="Regenerates MinGW Windows make files" if="mingw">
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true">
            <arg line="/c RefreshMinGW.bat"/>
        </exec>
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true">
            <arg line="/c GenMinGW.bat"/>
        </exec>
    </target>
    <target name="cmakeRefresh-eclipsemingw"  description="Regenerates Eclipse MinGW Windows make files" if="eclipsemingw">
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true">
             <arg line="/c RefreshEclipseMinGW.bat"/>
        </exec>
        <exec executable="cmd.exe" dir="${biogears.src}/cmake" failonerror="true">
            <arg line="/c GenEclipseMinGW.bat"/>
        </exec>
    </target>
    <target name="cmakeRefresh-xcode" description="Regenerates Xcode project files" if="xcode">
        <exec executable="/bin/sh" dir="${biogears.src}/cmake" failonerror="true">
            <arg value="RefreshXcode.sh"/>
        </exec>
        <exec executable="/bin/sh" dir="${biogears.src}/cmake" failonerror="true">
            <arg value="GenXcode.sh"/>
        </exec>
    </target>
    <target name="cmakeRefresh-unixMake" description="Regenerates Xcode project files" if="unixMake">
        <exec executable="/bin/bash" dir="${biogears.src}/cmake" failonerror="true">
            <arg value="RefreshUnixMake.sh"/>
        </exec>
        <exec executable="/bin/bash" dir="${biogears.src}/cmake" failonerror="true">
            <arg value="GenUnixMake.sh"/>
        </exec>
    </target>
	
	<!-- 
	************* 
	Clean Targets
	************* 
	-->

	<target name="clean" depends="refreshBin, clean-win" description="cleans Java and C++">
	  <ant antfile="build.xml" dir="${biogears.bind}" target="clean" />
	  <ant antfile="build.xml" dir="${biogears.cdm}" target="clean" />
	  <ant antfile="build.xml" dir="${biogears.engine}" target="clean" />    
	  <ant antfile="build.xml" dir="${biogears.gui}" target="clean" />
	</target>
	<target name="refreshBin" description="Clears out libraries/executables, old runs, and logs">
	  <delete dir="${biogears.bin}/debug"/>
	  <delete dir="${biogears.bin}/release"/>
	  <delete dir="${biogears.bin}/relWithDebInfo"/>
	  <delete dir="${biogears.bin}/debug64"/>
	  <delete dir="${biogears.bin}/release64"/>
	  <delete dir="${biogears.bin}/relWithDebInfo64"/>
	  <delete dir="${biogears.bin}/Scenarios"/>
	  <delete dir="${biogears.bin}/UnitTests"/>
	  <delete dir="${biogears.bin}/validation"/>
    <delete dir="${biogears.bin}/stable"/>
    <delete dir="${biogears.bin}/states"/>
	  
	  <delete>
        <fileset dir="${biogears.bin}" includes="*.log"/>
		<fileset dir="${biogears.bin}" includes="*.jar"/>
		<fileset dir="${biogears.bin}" includes="*.xml" excludes="BioGearsConfiguration.xml"/>
      </delete>
	  <ant antfile="build.xml" dir="${biogears.cdm}" target="refreshBin" />
	  <ant antfile="build.xml" dir="${biogears.bind}" target="refreshBin" />
	</target>
	<target name="clean-win" if="win">
		<parallel threadCount="4">		
            <exec executable="cmd.exe" dir="${biogears.src}" failonerror="true">
				<arg line="/c build-${env}.bat clean debug ant x86"/>
            </exec>
			<exec executable="cmd.exe" dir="${biogears.src}" failonerror="true">
				<arg line="/c build-${env}.bat clean release ant x86"/>
			</exec>
			<exec executable="cmd.exe" dir="${biogears.src}" failonerror="true">
				<arg line="/c build-${env}.bat clean debug ant x64"/>
			</exec>
			<exec executable="cmd.exe" dir="${biogears.src}" failonerror="true">
				<arg line="/c build-${env}.bat clean release ant x64"/>
			</exec>	 
		</parallel>
	</target>
	
	<!-- 
	*************** 
	Compile Targets
	*************** 
	-->

    <target name="compile" depends="refreshBin,compileJava,compile-win,compile-unix,compile-raspberryPi" description="compiles Java and C++"/>	
	<target name="compile-win" if="win">
		<parallel threadCount="4">		
            <exec executable="cmd.exe" dir="${biogears.src}" failonerror="true">
				<arg line="/c build-${env}.bat build debug ant x86"/>
            </exec>
			<exec executable="cmd.exe" dir="${biogears.src}" failonerror="true">
				<arg line="/c build-${env}.bat build release ant x86"/>
			</exec>
      <exec executable="cmd.exe" dir="${biogears.src}" failonerror="true">
				<arg line="/c build-${env}.bat build relwithdebinfo ant x86"/>
			</exec>
			<exec executable="cmd.exe" dir="${biogears.src}" failonerror="true">
				<arg line="/c build-${env}.bat build debug ant x64"/>
			</exec>
			<exec executable="cmd.exe" dir="${biogears.src}" failonerror="true">
				<arg line="/c build-${env}.bat build release ant x64"/>
			</exec>	 
		</parallel>
	</target>
	<target name="compile-unix" if="unix">
		<exec executable="/bin/bash" dir="${biogears.src}" failonerror="true">
			<arg line="build-${env}.sh build ${biogears.config} ant"/>
		</exec>
	</target>
	<target name="compile-raspberryPi" if="raspberryPi">
		<exec executable="/bin/bash" dir="${biogears.src}" failonerror="true">
			<arg line="build-${env}.sh build ${biogears.config} ant"/>
		</exec>
	</target>
	<target name="compileJava" description="compiles Java">	  
		<ant antfile="build.xml" dir="${biogears.bind}" target="compile" /> 
		<ant antfile="build.xml" dir="${biogears.bind}" target="jar" /> 
		<ant antfile="build.xml" dir="${biogears.cdm}" target="compile" /> 
		<ant antfile="build.xml" dir="${biogears.cdm}" target="jar" /> 
		<ant antfile="build.xml" dir="${biogears.engine}" target="compile" /> 
		<ant antfile="build.xml" dir="${biogears.engine}" target="jar" /> 
		<ant antfile="build.xml" dir="${biogears.gui}" target="compile" /> 
		<ant antfile="build.xml" dir="${biogears.gui}" target="jar" /> 
		<!-- Create a jar with all dependencies -->
		<delete file="../bin/BioGears.jar"/>
	    <!-- Create the Jar-->
		<jar destfile="../bin/BioGears.jar" excludes="**/Sun_micr.rsa **/Sun_micr.sf">
			<zipfileset src="${biogears.bin}/BioGearsGUI.jar" includes="**/*.java **/*.class"/>		
			<zipfileset src="${biogears.bin}/BioGearsEngine.jar" includes="**/*.java **/*.class"/>	
			<zipfileset src="${biogears.bin}/CommonDataModel.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.bin}/DataModelBindings.jar" includes="**/*.java **/*.class"/>
			<!-- Third Party COTS -->
			<zipfileset src="${biogears.cots.lib}/zip4j-1.3.1.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/log4j-1.2.17.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/jfreechart-1.0.13.jar" includes="**/*.java **/*.class **/*.properties"/>
			<zipfileset src="${biogears.cots.lib}/jcommon-1.0.16.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/swtgraphics2d.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/jchart2d-3.2.2/jchart2d-3.2.2.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/dom4j-1.6.1.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/gson-1.4.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/guava-11.0.2.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/javassist-3.16.1-GA.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/jsr305-1.3.9.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/reflections-0.9.9-RC1-uberjar.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/slf4j-api-1.6.1.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/slf4j-simple-1.6.1.jar" includes="**/*.java **/*.class"/>
			<zipfileset src="${biogears.cots.lib}/xml-apis-1.0.b2.jar" includes="**/*.java **/*.class"/>
			<manifest>
				<attribute name="Main-Class" value="mil.tatrc.physiology.biogears.gui.BioGearsGUI"/>
			</manifest>
		</jar>
	</target>
	
	<!-- 
	*********************** 
	Data Generation Targets
	*********************** 
	-->
	
	<target name="genData" description="Generates Data from the spreadsheet">
		<java classname="mil.tatrc.physiology.datamodel.dataset.DataSetReader" dir="${biogears.bin}" fork="true" failonerror="false">
			<classpath>
				<pathelement path="${biogears.cots.cp}"/>
			</classpath>
		</java>
	</target>
  
  <target name="genStates">
    <echo message="Generating Initial Patient States"/>    
		<delete dir=".\states"/>
    <java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="InitialPatientStates.config"/>
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>	
  </target>   
	
	<!-- 
	****************** 
	Deployment Targets
	****************** 
	-->
	
    <target name="deploy">
		<mkdir dir="${biogears.deploy}"/>
		<antcall target="zipDocumentation"/>
    <antcall target="zipSourceCode"/>
		<antcall target="zipVerification"/>
		<antcall target="buildToolkit"/>
		<antcall target="buildSDK"/>
    </target>
	<!-- Flag for MSVC based deployment -->
	<condition property="deployWindows">
        <and>
            <isset property="MSVC"/>
        </and>
    </condition>
		
	<target name="zipSourceCode">
		<!-- Zip up the source -->
		<delete file="${biogears.deploy}/${biogears.version}-src.zip"/>
		<zip destfile="${biogears.deploy}/${biogears.version}-src.zip" defaultexcludes="no">
      <zipfileset dir="${biogears.home}" prefix="${biogears.version}" defaultexcludes="no">
        <include name="LICENSE"/>
        <include name="NOTICE"/>        
        <include name=".gitattributes"/>
        <include name=".gitignore"/>
      </zipfileset>
			<zipfileset dir="${biogears.home}/bin" prefix="${biogears.version}/bin" defaultexcludes="no">
				<include name="config/**"/>
        <include name="ecg/**"/>
				<include name="environments/**"/>
				<include name="nutrition/**"/>
				<include name="patients/**"/>
				<include name="substances/**"/>
				<include name="*.config"/>
				<include name="*.bat"/>
        <include name="*.properties"/>
        <include name=".gitignore"/>
        <include name="BioGearsConfiguration.xml"/>
			</zipfileset>
			<zipfileset dir="${biogears.home}/data" prefix="${biogears.version}/data" defaultexcludes="no">
				<exclude name="~*.*"/>
			</zipfileset>
      <zipfileset dir="${biogears.home}/deploy/toolkit" prefix="${biogears.version}/deploy/toolkit" defaultexcludes="no">
				<include name="msvcp120.dll"/>
        <include name="msvcr120.dll"/>
        <include name="vccorlib120.dll"/>
				<include name="BioGearsGUI.bat"/>
				<include name="BioGearsGUI.sh"/>
        <include name="CompareResults.bat"/>
        <include name="GraphResults.bat"/>
        <include name="RunScenario.bat"/>
        <include name="RunScenario64.bat"/>
        <include name=".gitignore"/>
			</zipfileset>
      <zipfileset dir="${biogears.home}/docs" prefix="${biogears.version}/docs" defaultexcludes="no">
				<include name="Doxygen/*"/>
        <include name="Doxygen/html/bootstrap/**"/>
        <include name="Doxygen/html/font-awesome-4.3.0/**"/>
        <include name="Doxygen/html/images/**"/>
        <include name="Markdown/**"/>
        <include name="Methodology/**"/>        
        <include name="References/BioGears.bib"/>
        <include name="Validation/**"/>   
        <include name="Working/**"/>   
			</zipfileset>
      <zipfileset dir="${biogears.home}/lib" prefix="${biogears.version}/lib" defaultexcludes="no">
				
			</zipfileset>
      <zipfileset dir="${biogears.home}/library" prefix="${biogears.version}/library" defaultexcludes="no">
				
			</zipfileset>
			<zipfileset dir="${biogears.home}/src" prefix="${biogears.version}/src" defaultexcludes="no">
				<exclude name="**/build/**"/>
				<exclude name="**/*.sdf"/> 
				<exclude name="**/*.sou"/> 
				<exclude name="sdk/bin/**"/> 
        <exclude name="sdk/include/**"/> 
        <exclude name="sdk/lib/**"/> 
				<exclude name="utils/**"/> 
				<exclude name="cmake/msvs12x32/**"/> 
				<exclude name="cmake/msvs12x64/**"/> 
				<exclude name="cmake/msvs14x32/**"/> 
				<exclude name="cmake/msvs14x64/**"/> 
			</zipfileset>
			
			<zipfileset dir="${biogears.home}/verification" prefix="${biogears.version}/verification" defaultexcludes="no">
				<exclude name="*.sdf"/> 
				<exclude name="*.sou"/> 
				<exclude name="Scenarios/**/Current Baseline/**"/> 
			</zipfileset>
		</zip>
	</target>
	
	<target name="zipVerification">
		<!-- Zip up the verification -->
		<delete file="${biogears.deploy}/${biogears.version}-verification-all.zip"/>
		<zip destfile="${biogears.deploy}/${biogears.version}-verification-all.zip">
      <zipfileset dir="${biogears.home}" prefix="${biogears.version}">
        <include name="LICENSE"/>
        <include name="NOTICE"/>
      </zipfileset>
			<zipfileset dir="${biogears.home}/verification" prefix="${biogears.version}/verification">
			</zipfileset>
		</zip>
	</target>
	
	<!-- Note if you want to build documentation on something other than windows, you will need to create a target to run Doxygen -->
	<target name="zipDocumentation" depends="genDocumentation">
		<!-- Zip the Documentation -->
		<delete file="${biogears.deploy}/${biogears.version}-doc.zip"/>
		<zip destfile="${biogears.deploy}/${biogears.version}-doc.zip">
      <zipfileset dir="${biogears.home}" prefix="${biogears.version}">
        <include name="LICENSE"/>
        <include name="NOTICE"/>
      </zipfileset>
			<zipfileset dir="${biogears.doxy}" includes="html/**, Mainpage.html, ReadMe.txt" prefix="${biogears.version}/docs/"/>
		</zip>
	</target>
	<target name="genDocumentation"  if="deployWindows">
    <delete dir="..\bin\markdown"/>
    <delete dir="..\bin\validation"/>
		<delete dir="..\docs\doxygen\processed_md"/>
    <sleep milliseconds="80"/>
		<mkdir  dir="..\bin\markdown"/>
		<mkdir  dir="..\bin\validation"/>
		<mkdir  dir="..\docs\doxygen\processed_md"/>
		<echo message="Building SystemValidation Tables"/>	  
		<java classname="mil.tatrc.physiology.utilities.testing.validation.SystemValidation" dir="${biogears.bin}" fork="true" maxmemory="512m" jvm="${env.JAVA_HOME64}\bin\java" failonerror="false" >
			<sysproperty key="java.library.path" path="${biogears.bin}/${biogears.config}"/>
			<classpath>
				<pathelement path="${biogears.cots.cp}"/>
			</classpath>
		</java>
		<echo message="Building PatientValidation Tables"/>	  
		<java classname="mil.tatrc.physiology.utilities.testing.validation.PatientValidation" dir="${biogears.bin}" fork="true" maxmemory="512m" jvm="${env.JAVA_HOME64}\bin\java" failonerror="false" >
			<sysproperty key="java.library.path" path="${biogears.bin}/${biogears.config}"/>
			<classpath>
				<pathelement path="${biogears.cots.cp}"/>
			</classpath>
		</java>
    <echo message="Building CDM Tables"/>	  
    <java classname="mil.tatrc.physiology.datamodel.doxygen.CDM2MD" dir="${biogears.bin}" fork="true" maxmemory="512m" jvm="${env.JAVA_HOME64}\bin\java" failonerror="false" >
			<sysproperty key="java.library.path" path="${biogears.bin}/${biogears.config}"/>
			<classpath>
				<pathelement path="${biogears.cots.cp}"/>
			</classpath>
		</java>		
    <copy todir="..\docs\doxygen\processed_md">
			<fileset dir=".">
				<include name="*.md"/>
			</fileset>
		</copy>	
    <copy todir="..\docs\doxygen\processed_md">
			<fileset dir="..\bin\markdown">
				<include name="*.md"/>
			</fileset>
		</copy>	    
		<echo message="Running Markdown Preprocessor"/>	  
		<java classname="mil.tatrc.physiology.datamodel.doxygen.DoxygenPreprocessor" dir="${biogears.bin}" fork="true" maxmemory="512m" jvm="${env.JAVA_HOME64}\bin\java" failonerror="false" >
			<arg value="..\docs\markdown"/>
			<arg value="..\docs\doxygen\processed_md"/>
			<sysproperty key="java.library.path" path="${biogears.bin}/${biogears.config}"/>
			<classpath>
				<pathelement path="${biogears.cots.cp}"/>
			</classpath>
		</java>
    <java classname="mil.tatrc.physiology.datamodel.doxygen.DoxygenPreprocessor" dir="${biogears.bin}" fork="true" maxmemory="512m" jvm="${env.JAVA_HOME64}\bin\java" failonerror="false" >
			<arg value="..\docs\methodology"/>
			<arg value="..\docs\doxygen\processed_md"/>
			<sysproperty key="java.library.path" path="${biogears.bin}/${biogears.config}"/>
			<classpath>
				<pathelement path="${biogears.cots.cp}"/>
			</classpath>
		</java>
		<echo message="Processing Schema Documentation"/>	  
		<java classname="mil.tatrc.physiology.datamodel.doxygen.XSDToDoxygen" dir="${biogears.bin}" fork="true" maxmemory="512m" jvm="${env.JAVA_HOME64}\bin\java" failonerror="false" >
			<arg value="..\src\schema\xsd\BioGearsDataModel.xsd"/>
			<arg value="..\docs\doxygen\processed_md\xsd.ixx"/>
			<sysproperty key="java.library.path" path="${biogears.bin}/${biogears.config}"/>
			<classpath>
				<pathelement path="${biogears.cots.cp}"/>
			</classpath>
		</java>
    <antcall target="runPlots"/>
    <antcall target="runDoxygen-windows"/>
	</target>
	<target name="runDoxygen-windows" if="deployWindows">	
    <echo message="Running doxygen"/>		
		<exec executable="cmd.exe" dir="${biogears.doxy}" failonerror="true">
			<arg line="/c RunDoxygen.bat Doxyfile ant"/><!-- This batch does all the prepDocumentation calls as well -->
			<!-- The batch can take 'ant' as arg 2, so it wont call the java, but for some reason only on some machines java can't find dlls. -->
		</exec>
	</target>
	
	
	<target name="buildToolkit" depends="buildToolkit-windows"/>
	<target name="buildToolkit-windows" if="deployWindows">
		<sequential>
			<delete>
				<fileset dir="${biogears.deploy}/toolkit/">
                    <exclude name="BioGearsGUI.bat"/>
                    <exclude name="BioGearsGUI.sh"/>
                    <exclude name="CompareResults.bat"/>
                    <exclude name="GraphResults.bat"/>
                    <exclude name="RunScenario.bat"/>
                    <exclude name="RunScenario64.bat"/>
                    <exclude name="appbundler-1.0.jar"/>
                    <exclude name="build.xml"/>
                    <exclude name="msvcp120.dll"/>
                    <exclude name="msvcr120.dll"/>
                    <exclude name="postbundle.sh"/>
                    <exclude name="vccorlib120.dll"/>
				</fileset>
			</delete>
		</sequential>	
		<copy file="../bin/BioGears.jar" todir="../deploy/toolkit/"/>
		<prepareBin targetDir="${biogears.deploy}/toolkit"/>    
    <echo message="Copy Binaries"/>     
		<copy todir="${biogears.deploy}/toolkit">
			<fileset dir=".">
				<include name="*.bat"/>
			</fileset>
		</copy>		
    <copy todir="${biogears.deploy}/toolkit/release">
			<fileset dir="${biogears.bin}/release">
				<include name="*.dll"/>
        <include name="*.exe"/>
			</fileset>
		</copy>		
    <copy todir="${biogears.deploy}/toolkit/release64">
			<fileset dir="${biogears.bin}/release64">
				<include name="*.dll"/>
        <include name="*.exe"/>
			</fileset>
		</copy>		
		<delete file="${biogears.deploy}/${biogears.version}-toolkit-windows.zip"/>
		<zip destfile="${biogears.deploy}/${biogears.version}-toolkit-windows.zip">
      <zipfileset dir="${biogears.home}" prefix="${biogears.version}">
        <include name="LICENSE"/>
        <include name="NOTICE"/>
      </zipfileset>
			<zipfileset dir="${biogears.deploy}/toolkit" prefix="${biogears.version}/toolkit/"/>
			<zipfileset dir="${biogears.doxy}" includes="html/**, Mainpage.html, ReadMe.txt" prefix="${biogears.version}/docs/"/>
		</zip>  		
	</target>
	
	<target name="buildSDK" depends="buildSDK-windows"/>	
	<target name="buildSDK-windows" depends="copyToSDK-windows" if="deployWindows">
		<!-- Make sure howto files compile -->
		<ant antfile="build.xml" dir="${biogears.SDK}" target="all" /> 
		<!-- Zip it! -->
		<delete file="${biogears.deploy}/${biogears.version}-sdk-windows.zip"/>
		<zip destfile="${biogears.deploy}/${biogears.version}-sdk-windows.zip">
      <zipfileset dir="${biogears.home}" prefix="${biogears.version}">
        <include name="LICENSE"/>
        <include name="NOTICE"/>
      </zipfileset>
			<zipfileset dir="${biogears.SDK}" excludes="howto/build/**, /cmake/msvs*/**" prefix="${biogears.version}"/>
			<zipfileset dir="${biogears.doxy}" includes="html/**, Mainpage.html, ReadMe.txt" prefix="${biogears.version}/docs/"/>
		</zip>
	</target>
	<target name="copyToSDK-windows" if="deployWindows">
		<!-- Clean out the sdk folder of any previous deployment -->
		<sequential>
			<delete dir="${biogears.SDK}/bin"/>
			<delete dir="${biogears.SDK}/include"/>
			<delete dir="${biogears.SDK}/lib"/>
		</sequential>
		<prepareBin targetDir="${biogears.SDK}/bin"/>
		<!-- Copy Eigen Headers -->
		<copy todir="${biogears.SDK}/include/Eigen-3.3.1">
			<fileset dir="../lib/Eigen-3.3.1/"/> 
		</copy>
		<!-- Copy LOG4CPP Headers -->
		<copy todir="${biogears.SDK}/include/log4cpp">
			<fileset dir="../lib/log4cpp/"> 
				<include name="**/*.h"/>
				<include name="**/*.hh"/>
			</fileset>
		</copy>
    <!-- Code Synthesis Headers -->
		<copy todir="${biogears.SDK}/include/xercesc">
			<fileset dir="${biogears.cots.lib}/${xerces.version}/src/xercesc"/> 
		</copy>
		<copy todir="${biogears.SDK}/include/xsd">
			<fileset dir="${biogears.cots.lib}/${xsd.version}/libxsd/xsd"/>
		</copy>
    <!-- BioGears Headers -->
		<copy todir="${biogears.SDK}/include/bind">
			<fileset dir="./schema/cpp/bind"> 
				<include name="**/*.hxx"/>
			</fileset>
		</copy>
		<copy todir="${biogears.SDK}/include/cdm/">
			<fileset dir="./cdm/cpp/"> 
				<include name="**/*.h"/>
				<include name="**/*.hxx"/>
				<include name="**/*.inl"/>
				<include name="**/*.txt"/>
			</fileset>
		</copy>
		<copy file="./engine/cpp/BioGearsPhysiologyEngine.h" todir="${biogears.SDK}/include"/>
		<!-- DLLs -->    
		<copy file="${biogears.bin}/Debug/log4cpp.dll"  todir="${biogears.SDK}/bin/Debug"/>
		<copy file="${biogears.bin}/Debug64/log4cpp.dll"  todir="${biogears.SDK}/bin/Debug64"/>
		<copy file="${biogears.bin}/Release/log4cpp.dll" todir="${biogears.SDK}/bin/Release"/>			
		<copy file="${biogears.bin}/Release64/log4cpp.dll" todir="${biogears.SDK}/bin/Release64"/>			
		<!-- Code Synthesis Libs -->
		<copy file="${xerces.lib.path.debug32}/${xerces.lib.name.debug32}" todir="./sdk/lib/Debug"/>		
		<copy file="${xerces.lib.path.release32}/${xerces.lib.name.release32}"  todir="./sdk/lib/Release"/>
		<copy file="${xerces.lib.path.debug64}/${xerces.lib.name.debug64}" todir="./sdk/lib/Debug64"/>		
		<copy file="${xerces.lib.path.release64}/${xerces.lib.name.release64}"  todir="./sdk/lib/Release64"/>
		<!-- Code Synthesis DLLs -->
		<copy file="${biogears.bin}/Debug/${xerces.dll.name.debug32}"  todir="${biogears.SDK}/bin/Debug"/>
		<copy file="${biogears.bin}/Release/${xerces.dll.name.release32}" todir="${biogears.SDK}/bin/Release"/>
		<copy file="${biogears.bin}/Debug64/${xerces.dll.name.debug64}"  todir="${biogears.SDK}/bin/Debug64"/>
		<copy file="${biogears.bin}/Release64/${xerces.dll.name.release64}" todir="${biogears.SDK}/bin/Release64"/>			
    <!-- BioGears Libs -->
		<copySDKLib-windows proj="schema" lib="DataModelBindings"/>
		<copySDKLib-windows proj="cdm"    lib="CommonDataModel"/>
    <copySDKLib-windows proj="cdm"    lib="CommonDataModelJNI"/>
    <copySDKLib-windows proj="cdm"    lib="CommonDataModelTest"/>
		<copySDKLib-windows proj="engine" lib="BioGearsEngine"/>
    <copySDKLib-windows proj="engine" lib="BioGearsEngineJNI"/>
    <copySDKLib-windows proj="engine" lib="BioGearsEngineTest"/>
		<!-- Copy Java -->
		<copy file="../bin/BioGears.jar" todir="./sdk/lib/"/>
	</target>
	<macrodef name="copySDKLib-windows">
		<attribute name="proj"/>
		<attribute name="lib"/>
		<sequential>		
			<copy file="./cmake/msvs14x32/@{proj}/debug/@{lib}.dll" todir="./sdk/bin/debug"/>
			<copy file="./cmake/msvs14x32/@{proj}/debug/@{lib}.lib" todir="./sdk/lib/debug"/>
			<copy file="./cmake/msvs14x32/@{proj}/debug/@{lib}.pdb" todir="./sdk/lib/debug"/>
			<copy file="./cmake/msvs14x32/@{proj}/debug/@{lib}.exp" todir="./sdk/lib/debug"/>
			<copy file="./cmake/msvs14x32/@{proj}/release/@{lib}.dll" todir="./sdk/bin/release"/>
			<copy file="./cmake/msvs14x32/@{proj}/release/@{lib}.lib" todir="./sdk/lib/release"/>
			
			<copy file="./cmake/msvs14x64/@{proj}/debug/@{lib}.dll" todir="./sdk/bin/debug64"/>
			<copy file="./cmake/msvs14x64/@{proj}/debug/@{lib}.lib" todir="./sdk/lib/debug64"/>
			<copy file="./cmake/msvs14x64/@{proj}/debug/@{lib}.pdb" todir="./sdk/lib/debug64"/>
			<copy file="./cmake/msvs14x64/@{proj}/debug/@{lib}.exp" todir="./sdk/lib/debug64"/>
			<copy file="./cmake/msvs14x64/@{proj}/release/@{lib}.dll" todir="./sdk/bin/release64"/>
			<copy file="./cmake/msvs14x64/@{proj}/release/@{lib}.lib" todir="./sdk/lib/release64"/>		
		</sequential>
	</macrodef>
	
	<macrodef name="prepareBin">
		<attribute name="targetDir"/>
		<sequential>
			<copy todir="@{targetDir}/config">
				<fileset dir="${biogears.bin}/config">
				</fileset>
			</copy>
			<copy todir="@{targetDir}/patients">
				<fileset dir="${biogears.bin}/patients">
				</fileset>
			</copy>
			<copy todir="@{targetDir}/environments">
				<fileset dir="${biogears.bin}/environments">
				</fileset>
			</copy>
			<copy todir="@{targetDir}/ecg">
				<fileset dir="${biogears.bin}/ecg">
				</fileset>
			</copy>
      <copy todir="@{targetDir}/nutrition">
				<fileset dir="${biogears.bin}/nutrition">
				</fileset>
			</copy>
			<copy todir="@{targetDir}/states">
				<fileset dir="${biogears.bin}/states"/>
			</copy>
      <copy todir="@{targetDir}/substances">
				<fileset dir="${biogears.bin}/substances"/>
			</copy>
			<copy todir="@{targetDir}/xsd">
				<fileset dir="${biogears.bin}/xsd"/>
			</copy>
			<copy file="${biogears.bin}/UCEDefs.txt" todir="@{targetDir}"/>
			<copy file="${biogears.bin}/log4j.properties" todir="@{targetDir}"/>
      <copy file="${biogears.bin}/BioGearsConfiguration.xml" todir="@{targetDir}"/>
			<!-- Copy over scenarios -->
      <copy todir="@{targetDir}/Scenarios/" >  
        <fileset dir="${biogears.verification}/Scenarios">  
          <exclude name="**/Current Baseline/**"/>
				</fileset>
      </copy>  
		</sequential>
	</macrodef>
	
	<!-- 
	********************************************* 
	Verificaiton, Validation and Testing Targets
	********************************************* 
	-->

  <target name="reconfig4Serialization">
    <echo message="Reconfiguring config files for serialization"/>
    <java classname="mil.tatrc.physiology.utilities.testing.Reconfiguration" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="serialization"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>	
  </target>

  <target name="runVandV" depends="runSystemValidation, runPatientValidation, runVerification"/>
  
  <target name="runSystemValidation">
    <echo message="Running System Validation Scenarios"/>
    <java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="ValidationSystems.config"/>
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>	
    <antcall target="reportSystemValidation"/>
  </target>   
  <target name="reportSystemValidation">
    <echo message="Reporting System Validation Results"/>
    <java classname="mil.tatrc.physiology.utilities.testing.validation.SystemValidation" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>	
  </target>   
	
	<target name="runPatientValidation">
    <echo message="Running Patient Validation Scenarios"/>       
		<delete dir=".\stable"/>
    <mkdir dir=".\stable"/>
    <java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="ValidationPatients.config"/>
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>		
    <antcall target="reportPatientValidation"/>
  </target>  
  <target name="reportPatientValidation">
    <echo message="Reporting Patient Validation Results"/>
    <java classname="mil.tatrc.physiology.utilities.testing.validation.PatientValidation" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>	
  </target>     
	
	<target name="runDrugValidation">
    <echo message="Running Drug Validation Scenarios"/>
    <java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="ValidationDrugs.config"/>
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>
  </target> 

  <target name="runVerification">
    <echo message="Running Verification Scenarios"/>
    <java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="VerificationScenarios.config"/>
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>
  </target>   
  
  <target name="runLongVerification">
    <echo message="Running Verification Scenarios"/>
    <java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="LongVerificationScenarios.config"/>
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>
  </target>   
  
  <target name="runPlots" description="Assumes code is built, and executes the custom plot target">
	  <echo message="Running Plots"/>
    <java classname="mil.tatrc.physiology.utilities.csv.plots.PlotDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="PlotRun.config"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>
  </target>
  
  <target name="runDebugPlots" description="Assumes code is built, and executes the custom plot target">
	  <echo message="Running Debug Plots"/>
    <java classname="mil.tatrc.physiology.utilities.csv.plots.PlotDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="DebugPlots.config"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>
  </target>
	
	<target name="runDebug" description="Assumes code is built, and executes the custom debug target">
	  <echo message="Running Debug Tests"/>
    <java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="DebugRun.config"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>
  </target>
    
  <target name="runUnitTests" depends="runCDMUnitTests, runBGEUnitTests" />
	
	<target name="runCDMUnitTests" description="runs unit tests and verifies those results with the baseline data">
		<echo message="Running CDM Unit Tests"/>
    <java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="CDMUnitTests.config"/>
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>
	</target>	
  
  <target name="runBGEUnitTests" description="runs unit tests and verifies those results with the baseline data">
		<echo message="Running BGE Unit Tests"/>
    <java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" maxmemory="900m" failonerror="false">
        <arg value="BGEUnitTests.config"/>
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>
	</target>	
	
	<target name="runExtended" description="Assumes code is built, and executes the extended (long running) test suite">		
		<echo message="Running Extended Tests"/>
		<java classname="mil.tatrc.physiology.utilities.testing.TestDriver" dir="${biogears.bin}" fork="true" failonerror="false">
        <arg value="VerificationScenarios-Extended.config"/>
        <arg value="${commitHash}"/>
        <arg value="${env}"/>
        <arg value="${architecture}"/>
        <classpath>
          <pathelement path="${biogears.cots.cp}"/>
        </classpath>
    </java>
	</target>
    
	<!-- 
	***************** 
	Rebasing Targets
	***************** 
	-->
	<target name="rebaseAll" depends="rebaseScenarios, rebaseUnitTests" />
	
	<property name="rebaseFrom" value=".\Scenarios\"/>      
	<property name="rebaseTo" value="..\verification\Scenarios\"/>      
	<target name="rebaseScenarios">
        <java classname="mil.tatrc.physiology.utilities.testing.Rebase" dir="${biogears.bin}" fork="true" failonerror="false">
            <arg value="${rebaseFrom}" unless:blank="${rebaseFrom}"/><!-- From -->
            <arg value="${rebaseTo}" unless:blank="${rebaseTo}"/><!-- To -->
            <arg value="ALL"/><!-- Config -->
			      <arg value="true"/><!-- Rebasing scenarios? -->
			<classpath>
				<pathelement path="${biogears.cots.cp}"/>
			</classpath>
        </java>
    </target>   

	<!-- Example for pulling from the build machine : ant rebaseDebug -DrebaseFrom="\\sed-biogears\JenkinsBuild\History\MSVC-x86\374 - b5541f5b6212d8288f1ff35da996110f871292c9\Scenarios" -->
    <target name="rebaseDebug">
        <java classname="mil.tatrc.physiology.utilities.testing.Rebase" dir="${biogears.bin}" fork="true" failonerror="false">
            <arg value="${rebaseFrom}" unless:blank="${rebaseFrom}"/><!-- From -->
            <arg value="${rebaseTo}" unless:blank="${rebaseTo}"/><!-- To -->
            <arg value="DebugRun.config"/><!-- Config -->
			      <arg value="true"/><!-- Rebasing scenarios? -->
            <classpath>
				      <pathelement path="${biogears.cots.cp}"/>
			      </classpath>
        </java>
    </target>   	
	
	<property name="from" value=".\UnitTests\"/>   
	<property name="to" value="..\verification\UnitTests\"/>  
	<target name="rebaseUnitTests">
        <java classname="mil.tatrc.physiology.utilities.testing.Rebase" dir="${biogears.bin}" fork="true" failonerror="false">
            <arg value="${from}" unless:blank="${from}"/><!-- From -->
            <arg value="${to}" unless:blank="${to}"/><!-- To -->
            <arg value="ALL"/><!-- Config -->
			      <arg value="false"/><!-- Rebasing scenarios? -->
			<classpath>
				<pathelement path="${biogears.cots.cp}"/>
			</classpath>
        </java>
    </target>  
	
	  

</project>
	
	
