<project name="DataModelBindings" default="all" basedir="../" xmlns:ac="antlib:net.sf.antcontrib">

    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/build.properties.${env}"/>
	   
	<target name="all" depends="clean, compile, jar"/>
		
	<target name="clean">
		<delete dir="${biogears.bind}/build"/>
		<delete file="${biogears.bin}/DataModelBindings.jar"/>
		<delete file="${biogears.bind}/cpp_schema_built"/>		
		<delete file="${biogears.bind}/jaxb_schema_built"/>
	</target>

	<target name="compile">
		<!-- Rebuild the bind, note this will clean out the java if it has to rebuild -->
		<ant antfile="buildXSD.xml" dir="${biogears.bind}" target="all" /> 		
		<mkdir dir="${biogears.bind}/build/java"/>
		<javac debug="true" srcdir="${biogears.bind}/java" destdir="${biogears.bind}/build/java" classpath="${biogears.cots.cp}"/>		
	</target>
	
	<target name="jar">
		<delete file="${biogears.bin}/DataModelBindings.jar"/>
	    <!-- Create the Jar-->
		<jar destfile="${biogears.bin}/DataModelBindings.jar" excludes="**/Sun_micr.rsa **/Sun_micr.sf">
			<fileset dir="${biogears.bind}/build/java"/>
		</jar>
	</target>
	
	<target name="refreshBin">        
	    <ant antfile="buildXSD.xml" dir="${biogears.bind}" target="refreshBinXSD" />
	</target>
	
<!-- 	
	<target name="compileGCH" depends="compileBindGCH,compileCDMGCH"/>
	
	<target name="compileBindGCH">
		<mkdir dir="${biogears.cdm}/gch"/>
		<delete file="${biogears.cdm}/gch/biogears-cdm.hxx.gch"/>
		<exec executable="cmd.exe" dir="." failonerror="true">
    		<arg line="/c g++.exe -x c++-header -DCommonDataModelBind_EXPORTS -s -std=gnu++0x -O3 -DNDEBUG -I../lib/${xerces.version}/src -I../lib/xsd-4.0.0-i686-windows/libxsd -DXML_LIBRARY -o ./cdm/gch/biogears-cdm.hxx.gch -c ./cdm/cpp/bind/biogears-cdm.hxx"/>
    	</exec>
		<delete file="${biogears.cdm}/gch/cdm-schema.hxx.gch"/>
		<exec executable="cmd.exe" dir="." failonerror="true">
    		<arg line="/c g++.exe -x c++-header -DCommonDataModelBind_EXPORTS -s -std=gnu++0x -O3 -DNDEBUG -I../lib/${xerces.version}/src -I../lib/xsd-4.0.0-i686-windows/libxsd -DXML_LIBRARY -o ./cdm/gch/cdm-schema.hxx.gch -c ./cdm/cpp/bind/cdm-schema.hxx"/>
    	</exec>
	</target>
	
	<target name="compileCDMGCH">
		<mkdir dir="${biogears.cdm}/gch"/>
		<delete file="${biogears.cdm}/gch/stdafx.h.gch"/>
		<exec executable="cmd.exe" dir="." failonerror="true">
    		<arg line="/c g++.exe -x c++-header -DCommonDataModel_EXPORTS -s -std=gnu++0x -O3 -DNDEBUG -I./cdm/cpp -I./cdm/cpp/bind -I../lib -I../lib/${xerces.version}/src -I../lib/xsd-4.0.0-i686-windows/libxsd -D EIGEN_MPL2_ONLY -D COMMONDATAMODEL_EXPORTS -D UNICODE -D _UNICODE -o ./cdm/gch/stdafx.h.gch -c ./cdm/cpp/stdafx.h"/>
    	</exec>
		<delete file="${biogears.cdm}/gch/CommonDataModel.h.gch"/>
		<exec executable="cmd.exe" dir="." failonerror="true">
    		<arg line="/c g++.exe -x c++-header -DCommonDataModel_EXPORTS -s -std=gnu++0x -O3 -DNDEBUG -I./cdm/cpp -I./cdm/cpp/bind -I../lib -I../lib/${xerces.version}/src -I../lib/xsd-4.0.0-i686-windows/libxsd -D EIGEN_MPL2_ONLY -D COMMONDATAMODEL_EXPORTS -D UNICODE -D _UNICODE -o ./cdm/gch/CommonDataModel.h.gch -c ./cdm/cpp/CommonDataModel.h"/>
    	</exec>
	</target>
	
	<taskdef uri="antlib:net.sf.antcontrib" resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="../lib/ant-contrib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<loadfile property="file" srcfile="./cdm/cpp/bind/biogears-cdm.txt"/>	
	<target name="createPCH">
		<delete file="./cdm/cpp/bind/cdm-all.hxx"/>
		<echo append="true" file="./cdm/cpp/bind/cdm-all.hxx">#pragma once${line.separator}</echo>
		<echo append="true" file="./cdm/cpp/bind/cdm-all.hxx">${line.separator}${line.separator}</echo>
		<ac:for list="${file}" param="val" delimiter="${line.separator}">
		<sequential>
			<condition property="ishxx">
				<contains string="@{val}" substring="hxx"/>
			</condition>
			<ac:if>				
				<contains string="@{val}" substring="hxx"/>
				<ac:then>
					<echo append="true" file="./cdm/cpp/bind/cdm-all.hxx">#include "@{val}"${line.separator}</echo>
				</ac:then>
			</ac:if>
        </sequential>
		</ac:for>
	</target>
-->
	
</project>	
