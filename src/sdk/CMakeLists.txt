CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(BioGearsSDK)
CMAKE_POLICY(SET CMP0015 NEW)

SET(env "" CACHE STRING "")

IF(env STREQUAL "")
SET(env "msvc" CACHE STRING "")
ENDIF()

IF(env STREQUAL "msvc")
    SET(XSD_VER "xsd-4.0.0-i686-windows" CACHE TYPE INTERNAL FORCE)
    SET(XERCES_VER "xerces-c-3.1.1" CACHE TYPE INTERNAL FORCE)
ELSEIF(env STREQUAL "mingw")
    SET(XSD_VER "xsd-4.0.0-i686-windows" CACHE TYPE INTERNAL FORCE)
    SET(XERCES_VER "xerces-c-3.1.2" CACHE TYPE INTERNAL FORCE)
ELSEIF(env STREQUAL "eclipsemingw")
    SET(XSD_VER "xsd-4.0.0-i686-windows" CACHE TYPE INTERNAL FORCE)
    SET(XERCES_VER "xerces-c-3.1.2" CACHE TYPE INTERNAL FORCE)
ELSEIF(env STREQUAL "xcode")
    SET(XSD_VER "xsd-4.0.0-i686-macosx" CACHE TYPE INTERNAL FORCE)
    SET(XERCES_VER "xerces-c-3.1.2" CACHE TYPE INTERNAL FORCE)
ELSEIF(env STREQUAL "unixMake")
    SET(XSD_VER "xsd-4.0.0-x86_64-linux-gnu" CACHE TYPE INTERNAL FORCE)
    SET(XERCES_VER "xerces-c-3.1.2" CACHE TYPE INTERNAL FORCE)
ELSEIF(env STREQUAL "raspberryPi")
    SET(XSD_VER "xsd-4.0.0-x86_64-linux-gnu" CACHE TYPE INTERNAL FORCE)
    SET(XERCES_VER "xerces-c-3.1.2" CACHE TYPE INTERNAL FORCE)
    SET(CMAKE_CXX_COMPILER "arm-linux-gnueabihf-g++")
ELSE()
    MESSAGE(FATAL_ERROR "env variable has not been specified.  Make sure when calling cmake a valid environment is specified via -Denv=")
ENDIF()

SET(CMAKE_CONFIGURATION_TYPES Debug Release CACHE TYPE INTERNAL FORCE )

IF(MSVC)
	SET(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG /MDd /Zi /Ob2 /Oi /Od /RTC1" CACHE TYPE INTERNAL FORCE)
ENDIF()

IF(MINGW)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++0x")#turn on C++11
ENDIF()

IF(APPLE)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++")
ENDIF()

IF(CMAKE_GENERATOR STREQUAL "Unix Makefiles")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ENDIF()

SET(CMAKE_CXX_STANDARD_LIBRARIES "" CACHE TYPE INTERNAL FORCE)
SET(CMAKE_C_STANDARD_LIBRARIES "" CACHE TYPE INTERNAL FORCE)

IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    MESSAGE( "64 bits compiler detected" )
    SET( EX_PLATFORM 64 )
    SET( EX_CONFIG "64" )
	SET(FIND_LIBRARY_USE_LIB64_PATHS ON)
ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 ) 
    MESSAGE( "32 bits compiler detected" )
    SET( EX_PLATFORM 32 )
    SET( EX_CONFIG "" )
	SET(FIND_LIBRARY_USE_LIB64_PATHS OFF)
ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )

ADD_DEFINITIONS(-DXSD_CXX11)

IF(UNIX)
    SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_RPATH}:\$ORIGIN")
ENDIF()

FILE(GLOB SRC_FILES
		"howto/cpp/*.h"
		"howto/cpp/*.cpp"
	)
SOURCE_GROUP("" FILES ${SRC_FILES})
SET(SOURCE ${SRC_FILES})
ADD_EXECUTABLE(HowToDriver ${SOURCE})

# Preprocessor Definitions and Include Paths
SET(FLAGS)
TARGET_INCLUDE_DIRECTORIES(HowToDriver PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)
TARGET_INCLUDE_DIRECTORIES(HowToDriver PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/cdm)
TARGET_INCLUDE_DIRECTORIES(HowToDriver PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/log4cpp/include)
TARGET_INCLUDE_DIRECTORIES(HowToDriver PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/Eigen-3.3.1)
SET_TARGET_PROPERTIES(HowToDriver PROPERTIES COMPILE_FLAGS "${FLAGS}" PREFIX "")
# Dependent Libraries
IF(MSVC)
FILE(GLOB D_LIB_FILES
		"lib/Debug${EX_CONFIG}/*.lib"
	)
FILE(GLOB O_LIB_FILES
		"lib/Release${EX_CONFIG}/*.lib"
	)
ELSEIF(UNIX)  
FILE(GLOB D_LIB_FILES
		"lib/*.so"
	)
FILE(GLOB O_LIB_FILES
		"lib/*.so"
	)
ELSE()
FILE(GLOB D_LIB_FILES
	"lib/*.lib"
	)
FILE(GLOB O_LIB_FILES
	"lib/*.lib"
)
ENDIF()

FOREACH(file ${D_LIB_FILES})
	TARGET_LINK_LIBRARIES(HowToDriver debug ${file})
ENDFOREACH()
FOREACH(file ${O_LIB_FILES})
	TARGET_LINK_LIBRARIES(HowToDriver optimized ${file})
ENDFOREACH()
